#if !defined(_perujmsra_)
#  define _perujmsra_

class model_data : public ad_comm{
  data_int syr;
  data_int eyr;
  data_int nage;
  data_int nlen;
  data_int lstp;
  data_int SR;
  data_number m;
  data_number alw;
  data_number blw;
  data_number wmat;
  data_number mat50;
  data_number matsd;
  data_number ahat;
  data_number ghat;
  data_vector va;
  data_int nyt;
  data_ivector iyr;
  data_vector survB;
  data_matrix Clt;
  data_number ilinf;
  data_number ik;
  data_number to;
  data_number icvl;
  data_number ireck;
  data_number iRo;
  data_vector iwt;
  data_number cv_it;
  data_number sigR;
  data_number sigVul;
  data_int phz_reck;
  data_int phz_growth;
  data_int use_prior;
  data_int dend;
  dvector age;
  dvector len;
  int Am1;
  double tiny;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number log_Linf;
  param_init_number log_k;
  param_init_number log_cvl;
  param_init_number log_reck;
  param_init_number log_Ro;
  param_init_bounded_dev_vector log_wt;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value nll;
  param_number fpen;
  param_number Linf;
  param_number k;
  param_number cvl;
  param_number reck;
  param_number Ro;
  param_number ssvul;
  param_vector zstat;
  param_vector wt;
  param_vector Sa;
  param_vector vul;
  param_number Eo;
  param_number reca;
  param_number recb;
  param_vector la;
  param_vector wa;
  param_vector lxo;
  param_vector fec;
  param_matrix P_la;
  param_matrix P_al;
  param_matrix Nat;
  param_matrix Ulength;
  param_matrix Uage;
  param_matrix Nlt;
  param_vector maxUy;
  param_vector muUl;
  param_vector psurvB;
  param_number q;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void trans_parms(void);
  void incidence_functions(void);
  void initialization(void);
  void SRA(void);
  void observation_model(void);
  void objective_function(void);

};
#endif
